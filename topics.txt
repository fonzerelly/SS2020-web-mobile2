TAG 1
0 Ablauf der Vorlesung
    0.1 Ziel der Vorlesung
    0.2 Vorstellung der Referatsthemen:
        0.2.0 Google Web Toolkit
        0.2.1 WebComponents
        0.2.2 Angular
        0.2.3 React Redux
        0.2.4 Vue
        0.2.5 Elm
    0.3 Studienarbeit
        0.2.1 Projektidee Kreuzwort-Spiel
        0.2.2 Projektidee Senso Spiel
        0.2.3 Projektidee Mastermind
        0.2.4 Projektidee 2048
        0.2.5 Projektidee Stars-Graph (IMDB API)
        0.2.6 Projektidee Github Contribution Ranking (Github API)

1 Software Entwicklungsprozess
    1.0 Agile Manifest vs Waterfall
    1.1 Scrum
        1.1.1 Rollen (PO, SM, Team)
        1.1.2 Dokumente (DoD, DoR, UserStory, Epic)
        1.1.3 Sprint
        1.1.4 Meetings (Daily, Planning I, Planning II, Storytime, Review, Retro)
        1.1.5 Tools (Trello, Github)

    1.2 Scratch Seminar
        1.2.1 Kurze Vorstellung von Scratch und seiner Funktionsweise
        1.2.2 Eigentständige Bearbeitung der Aufgabenstellung Krabbe fangen
        1.2.3 Space Invaders
            1.2.3.1 User Story schätzen
            1.2.3.2 Eigenarbeit Implementierung in Scratch


    



TAG 2
2 Qualitätsmaßnahmen
    2.1 Versionskontrolle mit Git
        2.1.1 Wozu Versionskontrolle
        2.1.2 Zentralisierte Versionskontroll Systeme
        2.1.2 Grundlegende Gitbefehle
        2.1.3 Git Workflows
    
    2.2 Automatische Tests
        2.2.1 Test Pyramide
        2.2.2 Testarten (Unit-, Integrations-, Acceptanztests)
        2.2.3 TestDrivenDevelopment
        2.2.4 CodeCoverage vs Mutation Based Testing
        2.2.5 Property Based Testing
        2.2.6 Cucumber & Gherkyn
    2.3 Continious Integration
        2.3.1 Wozu Continious Integration
        2.3.2 Linux-Shell und wichtigste Shellscripte
        2.4.3 Travis CI

    2.4 Git / npm Seminar
        2.4.1 Git-Kata
        2.4.2 Veröffentlichen via Github-Pages
        2.4.3 npm und package.json
        2.4.4 npm scripte
        2.4.5 TDD im MobProgramming
        2.4.6 Deployment nach Travis CI

TAG 3
3 Geschichte der Client-Server-Architektur
    3.0 HTTP-Prototokol
    3.1 Serverside Rendering
    3.2 Single-Side-Pages mit REST
    3.3 WebSockets
    3.4 Serverside Events
4 JavaScript
    4.1 Geschichte von JavaScript
        4.1.1 Eine Programmiersprache in 10 Tagen
        4.1.2 BrowserWars
        4.1.3 V8 und NodeJS
        4.1.4 JS als CompileTarget
    4.2 Warum JavaScript anders ist als andere Programmiersprachen
        4.2.1 == vs ===
        4.2.2 IEEE 764 Probleme
        4.2.3 Hoisting
        4.2.4 Prototypal Inheritance
        4.2.5 this ist nicht gleich this
    4.3 Man kann alles fixen
        4.3.1 Polyfills und Shims
        4.3.2 jQuery
        4.3.3 Underscore, Lodash, Ramda
        4.3.4 mocha, jasmine, jest

    4.4 Studentenreferate
        4.4.1 WebComponents
        4.4.2 Angular
        4.4.3 React / Redux
        4.4.4 Elm

TAG 4
    5.5 Asynchrone Programmierung in JS
        5.5.1 SingleThread Language & Event Loop
        5.5.2 Callback-Hell
        5.5.3 Promises
        5.5.4 async / await
        5.5.5 rx.js

    5.6. Funktionale Programmierung in JS
        5.6.1 Functions sind first class citicens
        5.6.2 Higher Order Functions
        5.6.3 Closures
        5.6.4 Currying
        5.6.5 Componieren von Funktionen
        5.6.6 Seiteneffekte
        5.6.7 filter map reduce

    6.7 Seminar Functional Programming (http://jsfiddle.net/0edzvay0/)

TAG 5
    6.8 Komplexe Programme im Browser
        6.8.1 Problem: Alles im Global Namespace
        6.8.2 IFFEs (Immediately invoked function expressions)
        6.8.3 CDNs
        6.8.4 Konkatenieren und Minifizieren mit BatchTools (grunt, gulp)
        6.8.5 require durch BuildTools (browserify, webpack)
        6.8.6 SourceMaps

    6.9 TypeScript
        6.9.1 Warum Typescript?
        6.9.2 Syntax
        6.9.3 Definitly Typed
        6.9.4 tslint
        6.9.5 Advanced Types

    6.10. CodeRetreat mit tsnode

TAG 6
    6.11 WebSecurity
        6.11.1 Angriffsvektor Cross-Site-Scripting (XSS)
        6.11.2 Cross-Origin-Resource-Sharing

7 HTML & CSS
    7.1 Div über Table
    7.2 CSS-Selektoren und ihre Gewichtung
    7.3 CSS-Strukturierung (SMACSS vs BEM)
    7.4 Mobile First
    7.5 CSS Libraries (960 grid, bootstrap, GoogleMaterial?)
    7.6 LESS vs SASS

8 WebSite Performance
    8.1 Warum Performance Optimierung
    8.2 Wie rendert der Browser
    8.3 Wie sollten CSS-Selektoren unter performance gesichtspunkten aussehen
    8.4 AnalyseTools
    8.5 Messbare vs gefühlter Performance
    8.6 Vorausrendern auf dem Server
    8.5 Tipps zur Performance-Verbesserung

Seminar Performance Analyse mit Chrome

TAG 7
9 Studienprojekt Präsentationen

